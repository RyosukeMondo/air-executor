{
  "id": "snapshot_1759336758711_ov2cpogh5",
  "approvalId": "approval_1759336600823_6fmplj6g1",
  "approvalTitle": "Steering Documents: Product, Tech, Structure",
  "version": 2,
  "timestamp": "2025-10-01T16:39:18.711Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# Product Overview\n\n## Product Purpose\n\nAir-Executor is an autonomous job management system that orchestrates task execution through ephemeral, single-task runners. It solves the problem of managing complex, multi-step workflows where tasks can dynamically spawn sub-tasks based on runtime conditions, while maintaining clean resource lifecycle management and preventing concurrent execution conflicts.\n\n## Target Users\n\n**Primary Users: Development Teams and DevOps Engineers**\n\n**Needs:**\n- Automated execution of complex, multi-step workflows\n- Dynamic task generation based on runtime results\n- Resource-efficient execution with automatic cleanup\n- Prevention of duplicate task runners for the same job\n- Integration with Claude Code CLI for AI-assisted task execution\n\n**Pain Points:**\n- Manual orchestration of dependent tasks is error-prone\n- Long-running workers waste resources during idle periods\n- Difficult to manage dynamic workflows where task count isn't known upfront\n- Risk of concurrent execution causing race conditions\n- Lack of visibility into job status and task progress\n\n## Key Features\n\n1. **Ephemeral Task Runners**: Single-task execution pods/processes that start on-demand and terminate after completion, maximizing resource efficiency\n\n2. **Job State Management**: Polling-based job manager that monitors job status every 5 seconds (configurable) and spawns runners only when needed\n\n3. **Dynamic Task Queuing**: Task runners can queue additional sub-tasks during execution, enabling adaptive workflows that respond to runtime conditions\n\n4. **Concurrency Control**: Ensures only one task runner is active per job at any time, preventing race conditions and resource conflicts\n\n5. **Dual Implementation**: Support for both Apache Airflow (KubernetesExecutor) and Prefect for flexibility in infrastructure requirements\n\n6. **Claude Code Integration**: Task runners wrap Claude Code CLI for AI-assisted task execution capabilities\n\n## Business Objectives\n\n- **Reduce Resource Waste**: Ephemeral runners minimize idle compute time by 80-90% compared to persistent workers\n- **Enable Complex Workflows**: Support dynamic task generation for workflows where requirements emerge during execution\n- **Improve Reliability**: Single-runner-per-job constraint eliminates race conditions and duplicate work\n- **Lower Operational Overhead**: Automated lifecycle management reduces manual intervention by 95%\n- **Accelerate Development**: AI-assisted task execution through Claude Code integration speeds up implementation\n\n## Success Metrics\n\n- **Resource Efficiency**: Average runner lifetime < 10 minutes, resource utilization > 70% during active execution\n- **Execution Reliability**: 99%+ success rate for task completion without conflicts\n- **Task Throughput**: Process 50+ tasks per hour per job with dynamic scaling\n- **System Availability**: Job manager uptime > 99.5%\n- **User Adoption**: 80% of new workflows use Air-Executor within 6 months\n\n## Product Principles\n\n1. **Ephemeral Over Persistent**: Favor short-lived, single-purpose execution units over long-running workers to minimize resource waste and maximize isolation\n\n2. **Self-Contained Tasks**: Each task should be independently executable with clear inputs/outputs, enabling parallelization and retry without dependencies on runner state\n\n3. **Progressive Disclosure**: Workflows can discover and queue sub-tasks dynamically rather than requiring complete task graphs upfront, supporting adaptive execution patterns\n\n4. **Single Responsibility**: One runner per job at any time enforces clear ownership and prevents coordination complexity\n\n5. **Infrastructure Agnostic**: Support multiple orchestration backends (Airflow, Prefect) to adapt to existing infrastructure rather than forcing specific technology choices\n\n## Monitoring & Visibility\n\n- **Dashboard Type**: CLI-based status reporting with optional web dashboard (future enhancement)\n- **Real-time Updates**: Polling-based status checks every 5 seconds (configurable interval)\n- **Key Metrics Displayed**:\n  - Job status (working, waiting, completed)\n  - Active task runner status\n  - Task queue depth and completion rate\n  - Runner spawn/termination events\n  - Error states and retry attempts\n- **Sharing Capabilities**: Job logs and status exports for team visibility and debugging\n\n## Future Vision\n\n### Potential Enhancements\n\n- **Web Dashboard**: Real-time visualization of job status, task graphs, and resource utilization with tunnel support for remote access\n- **Analytics & Insights**: Historical trends, performance metrics, bottleneck identification\n- **Advanced Scheduling**: Cron-like scheduling, dependency-based triggers, external event integration\n- **Multi-User Collaboration**: Shared job management, role-based access control, commenting and annotations\n- **Smart Task Routing**: ML-based task complexity estimation for optimal resource allocation\n- **Distributed Job Management**: Multi-region job execution with global coordination\n- **Plugin Ecosystem**: Extensible task runner implementations for different execution environments (Docker, Kubernetes, serverless)\n",
  "fileStats": {
    "size": 5134,
    "lines": 90,
    "lastModified": "2025-10-01T16:31:54.441Z"
  },
  "comments": []
}